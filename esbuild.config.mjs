import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Plugin to handle WebAssembly files
const wasmPlugin = {
    name: 'wasm-loader',
    setup(build) {
        // Intercept import paths for .wasm files so esbuild doesn't try to bundle them
        build.onResolve({ filter: /\.wasm$/ }, args => {
            return {
                path: args.path,
                external: true
            };
        });
    }
};

// Use the build method directly instead of context
try {
    await esbuild.build({
        banner: {
            js: banner,
        },
        entryPoints: ["src/main.ts"],
        bundle: true,
        external: [
            "obsidian",
            "electron",
            ...builtins,
            "*.wasm" // Mark all .wasm files as external
        ],
        format: "cjs",
        target: "es2018",
        logLevel: "info",
        sourcemap: prod ? false : "inline",
        treeShaking: true,
        outfile: "main.js",
        plugins: [wasmPlugin],
        watch: !prod ? {
            onRebuild(error, result) {
                if (error) console.error('Watch build failed:', error);
                else console.log('Watch build succeeded:', result);
            },
        } : false,
        minify: prod,
    });

    if (!prod) {
        console.log('Watching for changes...');
    }
} catch (error) {
    console.error('Build failed:', error);
    process.exit(1);
}